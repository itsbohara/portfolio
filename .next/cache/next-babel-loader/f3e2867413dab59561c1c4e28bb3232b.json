{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport zenscroll from 'zenscroll';\nimport MediaIcons from '../UI/Icons/MediaIcons/MediaIcons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../icons/icons';\nimport { CubeSpinner } from '../UI/Spinner/Spinner';\n\nvar css = require('./Cover.module.css');\n\nvar Cover = React.memo(function () {\n  var coverRef = React.useRef(null);\n\n  var _React$useState = React.useState(undefined),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      height = _React$useState2[0],\n      setHeight = _React$useState2[1];\n\n  var _React$useState3 = React.useState(false),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      bgLoaded = _React$useState4[0],\n      setBgLoaded = _React$useState4[1];\n\n  React.useEffect(function () {\n    setHeight(window.innerHeight);\n    var image = new Image();\n    image.src = '/images/palm.png';\n    console.log(image.complete);\n  }, []);\n  var scrollToPortfolio = React.useCallback(function () {\n    if (coverRef && coverRef.current) {\n      var posToScrollTo = coverRef.current.clientHeight;\n      zenscroll.toY(posToScrollTo);\n    }\n  }, [coverRef]);\n  var containerClasses = [css.Main, bgLoaded && css.loaded].join(' ');\n  var arrowTextClasses = [css.ArrowText].join(' ');\n\n  var imageLoadHandler = function imageLoadHandler() {\n    if (!bgLoaded) setBgLoaded(true);\n  };\n\n  return __jsx(\"div\", {\n    className: containerClasses,\n    ref: coverRef,\n    style: {\n      height: \"\".concat(height, \"px\")\n    }\n  }, !bgLoaded ? __jsx(Loading, null) : null, __jsx(\"div\", {\n    className: css.BackgroundContainer\n  }, __jsx(\"img\", {\n    src: \"/images/palm.png\",\n    alt: \"cover-bg-palm\",\n    className: css.BackgroundImage,\n    onLoad: imageLoadHandler,\n    onError: imageLoadHandler\n  }), __jsx(\"div\", {\n    className: css.BackgroundMask\n  })), __jsx(\"div\", {\n    className: css.MediaIcons\n  }, __jsx(MediaIcons, {\n    vertical: true\n  })), __jsx(\"div\", {\n    className: css.TitleContainer\n  }, __jsx(AnimatedText, {\n    text: \"Joona\"\n  }), __jsx(AnimatedText, {\n    text: \"Joenpolvi\",\n    delay: .5\n  }), __jsx(\"h3\", {\n    className: css.Description\n  }, \" \", __jsx(\"span\", null, \"<Front End Developer />\"), \" \")), __jsx(\"div\", {\n    className: css.ArrowContainer\n  }, __jsx(\"div\", {\n    className: css.ArrowIcon,\n    onClick: scrollToPortfolio\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faChevronDown,\n    size: \"lg\"\n  })), __jsx(\"p\", {\n    className: arrowTextClasses\n  }, \"to portfolio\")));\n});\n\nvar AnimatedText = function AnimatedText(_ref) {\n  var text = _ref.text,\n      delay = _ref.delay;\n  return __jsx(\"div\", {\n    className: css.AnimatedText\n  }, text, __jsx(\"span\", {\n    style: {\n      animationDelay: \"\".concat(delay, \"s\")\n    }\n  }, text), __jsx(\"span\", {\n    style: {\n      animationDelay: \"\".concat(delay, \"s\")\n    }\n  }, text), __jsx(\"span\", {\n    style: {\n      animationDelay: \"\".concat(delay, \"s\")\n    }\n  }, text), __jsx(\"span\", {\n    style: {\n      animationDelay: \"\".concat(delay, \"s\")\n    }\n  }, text));\n};\n\nvar Loading = function Loading() {\n  return __jsx(\"div\", {\n    className: css.Loading\n  }, __jsx(CubeSpinner, null));\n};\n\nexport default Cover;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/components/Cover/Cover.tsx"],"names":["React","zenscroll","MediaIcons","FontAwesomeIcon","icons","CubeSpinner","css","require","Cover","memo","coverRef","useRef","useState","undefined","height","setHeight","bgLoaded","setBgLoaded","useEffect","window","innerHeight","image","Image","src","console","log","complete","scrollToPortfolio","useCallback","current","posToScrollTo","clientHeight","toY","containerClasses","Main","loaded","join","arrowTextClasses","ArrowText","imageLoadHandler","BackgroundContainer","BackgroundImage","BackgroundMask","TitleContainer","Description","ArrowContainer","ArrowIcon","faChevronDown","AnimatedText","text","delay","animationDelay","Loading"],"mappings":"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","sourcesContent":["import React from 'react'\nimport zenscroll from 'zenscroll'\n\nimport MediaIcons from '../UI/Icons/MediaIcons/MediaIcons'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { icons } from '../../icons/icons'\nimport { CubeSpinner } from '../UI/Spinner/Spinner'\n\nconst css = require('./Cover.module.css')\n\nconst Cover = React.memo((): JSX.Element => {\n    const coverRef = React.useRef<HTMLDivElement>(null)\n    const [height, setHeight] = React.useState<number | undefined>(undefined)\n    const [bgLoaded, setBgLoaded] = React.useState<boolean>(false)\n\n    React.useEffect(() => {\n        setHeight(window.innerHeight)\n\n        const image = new Image()\n        image.src = '/images/palm.png'\n        console.log(image.complete)\n    }, [])\n\n    const scrollToPortfolio = React.useCallback(() => {\n        if (coverRef && coverRef.current) {\n            const posToScrollTo: number = coverRef.current.clientHeight\n    \n            zenscroll.toY(posToScrollTo)\n        }\n    }, [coverRef])\n\n    const containerClasses = [\n        css.Main,\n        bgLoaded && css.loaded\n    ].join(' ')\n\n    const arrowTextClasses = [\n        css.ArrowText,\n    ].join(' ')\n\n    const imageLoadHandler = () => {\n        if (!bgLoaded) setBgLoaded(true)\n    }\n\n    return (\n        <div className={containerClasses} ref={coverRef} style={{height: `${height}px`}}>\n            { !bgLoaded ? <Loading /> : null }\n            <div className={css.BackgroundContainer}>\n                <img src={`/images/palm.png`} alt=\"cover-bg-palm\" className={css.BackgroundImage} onLoad={imageLoadHandler} onError={imageLoadHandler} />\n                <div className={css.BackgroundMask} />\n            </div>\n            <div className={css.MediaIcons}>\n                <MediaIcons vertical />\n            </div>\n            <div className={css.TitleContainer}>\n                {/* <h1 className={css.FirstName}>Joona</h1>\n                <h1 className={css.Surname}>Joenpolvi</h1> */}\n                <AnimatedText text='Joona' />\n                <AnimatedText text='Joenpolvi' delay={.5} />\n                <h3 className={css.Description}> <span>{\"<Front End Developer />\"}</span> </h3>\n            </div>\n            <div className={css.ArrowContainer} >\n                <div className={css.ArrowIcon}\n                    onClick={scrollToPortfolio}> \n                    <FontAwesomeIcon icon={icons.faChevronDown} size=\"lg\" />\n                </div>\n                <p className={arrowTextClasses}>to portfolio</p>\n            </div>\n        </div>\n    )\n})\n\ninterface IAnimatedText {\n    text: string\n    delay?: number\n}\n\nconst AnimatedText: React.FunctionComponent<IAnimatedText> = ({ text, delay }): JSX.Element => {\n    return (\n        <div className={css.AnimatedText}>\n            {text}\n            <span style={{animationDelay: `${delay}s`}}>{text}</span>\n            <span style={{animationDelay: `${delay}s`}}>{text}</span>\n            <span style={{animationDelay: `${delay}s`}}>{text}</span>\n            <span style={{animationDelay: `${delay}s`}}>{text}</span>\n        </div>\n    )\n}\n\nconst Loading: React.FunctionComponent = (): JSX.Element => {\n    return (\n        <div className={css.Loading}>\n            <CubeSpinner />\n        </div>\n    )\n}\n\nexport default Cover"]},"metadata":{},"sourceType":"module"}