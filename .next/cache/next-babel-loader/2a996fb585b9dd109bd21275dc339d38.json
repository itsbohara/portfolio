{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { googleKey } from '../../keys';\nimport { icons } from '../../icons/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst css = require('./Auth.module.css');\n\nconst Auth = ({\n  setSending,\n  setSignedIn\n}) => {\n  const signInHandler = (email, password) => {\n    setSending(true);\n    const baseURL = \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword\";\n    const apiKey = `?key=${googleKey}`;\n\n    const payload = _JSON$stringify({\n      email: email,\n      password: password,\n      returnSecureToken: true\n    });\n\n    fetch(baseURL + apiKey, {\n      method: 'post',\n      body: payload\n    }).then(response => response.json()).then(data => {\n      if (data.error) {} else {\n        console.log(data);\n        const idToken = data === null || data === void 0 ? void 0 : data.idToken;\n        const refreshToken = data === null || data === void 0 ? void 0 : data.refreshToken;\n        const email = data === null || data === void 0 ? void 0 : data.email;\n        const expireTime = String(new Date().getTime() + data.expiresIn * 1000);\n        localStorage.setItem('idToken', idToken);\n        localStorage.setItem('refreshToken', refreshToken);\n        localStorage.setItem('email', email);\n        localStorage.setItem('expireTime', expireTime);\n        setSending(false);\n        setSignedIn(true);\n      }\n    });\n  };\n\n  return __jsx(\"div\", {\n    className: css.Container\n  }, __jsx(AuthForm, {\n    submit: signInHandler\n  }));\n};\n\nconst initialAuthFormState = {\n  email: {\n    id: 'email',\n    inputType: 'email',\n    placeholder: 'email',\n    require: true,\n    value: '',\n    className: css.EmailInput,\n    icon: {\n      focus: icons.faEnvelopeOpen,\n      unfocus: icons.faEnvelope\n    }\n  },\n  password: {\n    id: 'password',\n    inputType: 'password',\n    placeholder: 'password',\n    require: true,\n    value: '',\n    className: css.PasswordInput,\n    icon: {\n      focus: icons.faUnlock,\n      unfocus: icons.faLock\n    }\n  }\n};\n\nconst AuthForm = ({\n  submit\n}) => {\n  const [formState, setFormState] = React.useState(initialAuthFormState);\n  React.useEffect(() => {\n    const keyHandler = event => {\n      if (event.key === 'Enter') {\n        signInHandler();\n      }\n    };\n\n    window.addEventListener('keydown', keyHandler, true);\n    return () => window.removeEventListener('keydown', keyHandler, true);\n  }, [formState]);\n\n  const changeHandler = (elemKey, event) => {\n    const updatedFormState = _objectSpread({}, formState, {\n      [elemKey]: _objectSpread({}, formState[elemKey], {\n        value: event.target.value\n      })\n    });\n\n    setFormState(updatedFormState);\n  };\n\n  const signInHandler = () => {\n    submit(formState.email.value, formState.password.value);\n  };\n\n  return __jsx(\"div\", {\n    className: css.AuthFormContainer\n  }, __jsx(\"form\", {\n    className: css.AuthForm\n  }, _Object$keys(formState).map(elementKey => {\n    return __jsx(InputComponent, _extends({\n      key: elementKey\n    }, formState[elementKey], {\n      changed: changeHandler\n    }));\n  })), __jsx(\"div\", {\n    className: css.SubmitButton,\n    onClick: signInHandler\n  }, __jsx(\"p\", null, \"Sign In\"), __jsx(FontAwesomeIcon, {\n    icon: icons.faSignInAlt\n  })));\n};\n\nconst InputComponent = props => {\n  var _props$icon;\n\n  const [isFocused, setIsFocused] = React.useState(false);\n  const containerClasses = [css.InputContainer, isFocused && css.focus].join(' ');\n  const iconClasses = [css.InputIcon, isFocused && css.focus].join(' ');\n  const spanClasses = [css.Span, isFocused && css.focus].join(' ');\n  return __jsx(\"div\", {\n    className: containerClasses\n  }, props.icon && __jsx(\"div\", {\n    className: css.IconContainer\n  }, __jsx(FontAwesomeIcon, {\n    className: iconClasses,\n    icon: (_props$icon = props.icon) === null || _props$icon === void 0 ? void 0 : _props$icon.unfocus\n  })), __jsx(\"input\", {\n    className: props.className,\n    placeholder: props.placeholder,\n    value: props.value,\n    type: props.inputType,\n    onChange: e => props.changed(props.id, e),\n    onFocus: () => setIsFocused(true),\n    onBlur: () => setIsFocused(false)\n  }), __jsx(\"span\", {\n    className: spanClasses\n  }));\n};\n\nexport default Auth;","map":{"version":3,"sources":["C:/Users/jouna/code/portfolio/containers/Auth/Auth.tsx"],"names":["React","googleKey","icons","FontAwesomeIcon","css","require","Auth","setSending","setSignedIn","signInHandler","email","password","baseURL","apiKey","payload","returnSecureToken","fetch","method","body","then","response","json","data","error","console","log","idToken","refreshToken","expireTime","String","Date","getTime","expiresIn","localStorage","setItem","Container","initialAuthFormState","id","inputType","placeholder","value","className","EmailInput","icon","focus","faEnvelopeOpen","unfocus","faEnvelope","PasswordInput","faUnlock","faLock","AuthForm","submit","formState","setFormState","useState","useEffect","keyHandler","event","key","window","addEventListener","removeEventListener","changeHandler","elemKey","updatedFormState","target","AuthFormContainer","map","elementKey","SubmitButton","faSignInAlt","InputComponent","props","isFocused","setIsFocused","containerClasses","InputContainer","join","iconClasses","InputIcon","spanClasses","Span","IconContainer","e","changed"],"mappings":"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","sourcesContent":["import * as React from 'react'\r\n\r\nimport { googleKey } from '../../keys'\r\nimport { icons } from '../../icons/icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst css = require('./Auth.module.css')\r\n\r\ninterface IAuthComponent {\r\n    setSending: (newSending: boolean) => void\r\n    setSignedIn: (newSignedIn: boolean) => void\r\n}\r\n\r\nconst Auth: React.FunctionComponent<IAuthComponent> = ({ setSending, setSignedIn }): JSX.Element => {\r\n    \r\n    const signInHandler = (email: string, password: string) =>  {\r\n        setSending(true)\r\n        const baseURL: string =\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword\"\r\n        const apiKey: string = `?key=${googleKey}`\r\n        const payload = JSON.stringify({\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        })\r\n        \r\n         fetch(baseURL + apiKey, { method: 'post', body: payload }).then(response => response.json()\r\n            ).then(data => {\r\n                if (data.error) {\r\n\r\n                } else {\r\n                    console.log(data)\r\n                    const idToken: string = data?.idToken\r\n                    const refreshToken: string = data?.refreshToken\r\n                    const email: string = data?.email\r\n                    const expireTime: string = String(new Date().getTime() + data.expiresIn * 1000)\r\n                    localStorage.setItem('idToken', idToken)\r\n                    localStorage.setItem('refreshToken', refreshToken)\r\n                    localStorage.setItem('email', email)\r\n                    localStorage.setItem('expireTime', expireTime)\r\n                    setSending(false)\r\n                    setSignedIn(true)\r\n                }\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div className={css.Container}>\r\n            <AuthForm submit={signInHandler} />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IFormElement {\r\n    id: string\r\n    inputType: string\r\n    value: string\r\n    placeholder?: string\r\n    require?: boolean\r\n    className?: string\r\n    icon? : { focus?: any, unfocus?: any }\r\n}\r\n\r\ninterface IFormState {\r\n    [email: string]: IFormElement\r\n    password: IFormElement\r\n}\r\n\r\nconst initialAuthFormState: IFormState = {\r\n    email: {\r\n        id: 'email',\r\n        inputType: 'email',\r\n        placeholder: 'email',\r\n        require: true,\r\n        value: '',\r\n        className: css.EmailInput,\r\n        icon: { focus: icons.faEnvelopeOpen, unfocus: icons.faEnvelope }\r\n    },\r\n    password: {\r\n        id: 'password',\r\n        inputType: 'password',\r\n        placeholder: 'password',\r\n        require: true,\r\n        value: '',\r\n        className: css.PasswordInput,\r\n        icon: { focus: icons.faUnlock, unfocus: icons.faLock }\r\n    },\r\n}\r\n\r\ninterface IAuthForm {\r\n    submit: (email: string, password: string) => void\r\n}\r\n\r\nconst AuthForm: React.FunctionComponent<IAuthForm> = ({ submit }): JSX.Element => {\r\n    const [formState, setFormState] = React.useState<IFormState>(initialAuthFormState)\r\n\r\n    React.useEffect(() => {\r\n        const keyHandler = (event: KeyboardEvent) => {\r\n            if (event.key === 'Enter') {\r\n                signInHandler()\r\n            }\r\n        }\r\n\r\n        window.addEventListener('keydown', keyHandler, true)\r\n\r\n        return () => window.removeEventListener('keydown', keyHandler, true)\r\n    }, [formState])\r\n\r\n    const changeHandler = (elemKey: string, event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const updatedFormState: IFormState = {\r\n            ...formState,\r\n            [elemKey]: {\r\n                ...formState[elemKey],\r\n                value: event.target.value\r\n            }\r\n        }\r\n        setFormState(updatedFormState)\r\n    }\r\n\r\n    const signInHandler = () => {\r\n        submit(formState.email.value, formState.password.value)\r\n    }\r\n\r\n    return (\r\n        <div className={css.AuthFormContainer}>\r\n            {/* <h2 className={css.FormTitle}>Admin Auth</h2> */}\r\n            <form className={css.AuthForm}>\r\n                { Object.keys(formState).map((elementKey: string) => {\r\n                    return (\r\n                        <InputComponent key={elementKey} {...formState[elementKey]} changed={changeHandler} />\r\n                    )\r\n                })}\r\n            </form>\r\n            <div className={css.SubmitButton} onClick={signInHandler}>\r\n                <p>Sign In</p>\r\n                <FontAwesomeIcon icon={icons.faSignInAlt} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IInputComponent extends IFormElement {\r\n    changed: (elemKey: string, event: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst InputComponent: React.FunctionComponent<IInputComponent> = (props): JSX.Element => {\r\n    const [isFocused, setIsFocused] = React.useState<boolean>(false)\r\n\r\n    const containerClasses = [\r\n        css.InputContainer,\r\n        isFocused && css.focus,\r\n    ].join(' ')\r\n\r\n    const iconClasses = [\r\n        css.InputIcon,\r\n        isFocused && css.focus\r\n    ].join(' ')\r\n\r\n    const spanClasses = [\r\n        css.Span,\r\n        isFocused && css.focus\r\n    ].join(' ')\r\n\r\n    return (\r\n        <div className={containerClasses}>\r\n            { props.icon &&  \r\n                <div className={css.IconContainer}>\r\n                    <FontAwesomeIcon className={iconClasses} icon={props.icon?.unfocus} />\r\n                </div>\r\n            }\r\n            <input className={props.className} \r\n                placeholder={props.placeholder}\r\n                value={props.value} \r\n                type={props.inputType}\r\n                onChange={(e) => props.changed(props.id, e)}\r\n                onFocus={() => setIsFocused(true)}\r\n                onBlur={() => setIsFocused(false)} /> \r\n            <span className={spanClasses}></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth"]},"metadata":{},"sourceType":"module"}