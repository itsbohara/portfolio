{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { icons } from '../../icons/icons';\n\nvar css = require('./ExpandedVideo.module.css');\n\nvar ExpandedVideo = function ExpandedVideo(_ref) {\n  var video_src = _ref.video_src,\n      close = _ref.close;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      unmount = _React$useState2[0],\n      setUnmount = _React$useState2[1];\n\n  React.useEffect(function () {\n    window.addEventListener('keydown', keyHandler, true);\n    return function () {\n      return window.removeEventListener('keydown', keyHandler, true);\n    };\n  }, []);\n  React.useLayoutEffect(function () {\n    // Get original body overflow\n    var originalStyle = window.getComputedStyle(document.body).overflow; // Prevent scrolling on mount\n\n    document.body.style.overflow = 'hidden'; // Re-enable scrolling when component unmounts\n\n    return function () {\n      document.body.style.overflow = originalStyle;\n    };\n  }, []); // Empty array ensures effect is only run on mount and unmount\n\n  var keyHandler = React.useCallback(function (event) {\n    console.log(event.key);\n\n    switch (event.key) {\n      case 'Escape':\n        setUnmount(true);\n        setTimeout(function () {\n          close();\n        }, 5000);\n        break;\n\n      default:\n        break;\n    }\n  }, []);\n  var classes = [css.Main, unmount ? css.unmount : css.mount].join(' ');\n  return __jsx(\"div\", {\n    className: classes\n  }, __jsx(\"div\", {\n    className: css.Backdrop,\n    onClick: function onClick() {\n      return close();\n    }\n  }), __jsx(\"div\", {\n    className: css.VideoContainer\n  }, __jsx(\"video\", {\n    className: css.Video,\n    controls: true\n  }, __jsx(\"source\", {\n    src: video_src,\n    type: \"video/mp4\"\n  }))), __jsx(\"div\", {\n    className: css.CloseButton,\n    onClick: function onClick() {\n      return close();\n    }\n  }, __jsx(FontAwesomeIcon, {\n    icon: icons.faTimes\n  })));\n};\n\nexport default ExpandedVideo;","map":{"version":3,"sources":["/home/joojo/code/portfolio/components/ExpandedVideo/ExpandedVideo.tsx"],"names":["React","FontAwesomeIcon","icons","css","require","ExpandedVideo","video_src","close","useState","unmount","setUnmount","useEffect","window","addEventListener","keyHandler","removeEventListener","useLayoutEffect","originalStyle","getComputedStyle","document","body","overflow","style","useCallback","event","console","log","key","setTimeout","classes","Main","mount","join","Backdrop","VideoContainer","Video","CloseButton","faTimes"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,gCAAhC;AACA,SAASC,KAAT,QAAsB,mBAAtB;;AAEA,IAAMC,GAAG,GAAGC,OAAO,CAAC,4BAAD,CAAnB;;AAOA,IAAMC,aAAsD,GAAG,SAAzDA,aAAyD,OAAuC;AAAA,MAApCC,SAAoC,QAApCA,SAAoC;AAAA,MAAzBC,KAAyB,QAAzBA,KAAyB;;AAAA,wBACrEP,KAAK,CAACQ,QAAN,CAAe,KAAf,CADqE;AAAA;AAAA,MAC5FC,OAD4F;AAAA,MACnFC,UADmF;;AAGlGV,EAAAA,KAAK,CAACW,SAAN,CAAgB,YAAM;AAClBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCC,UAAnC,EAA+C,IAA/C;AAEA,WAAO;AAAA,aAAMF,MAAM,CAACG,mBAAP,CAA2B,SAA3B,EAAsCD,UAAtC,EAAkD,IAAlD,CAAN;AAAA,KAAP;AACH,GAJD,EAIG,EAJH;AAMAd,EAAAA,KAAK,CAACgB,eAAN,CAAsB,YAAM;AACxB;AACA,QAAMC,aAAqB,GAAGL,MAAM,CAACM,gBAAP,CAAwBC,QAAQ,CAACC,IAAjC,EAAuCC,QAArE,CAFwB,CAGxB;;AACAF,IAAAA,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBD,QAApB,GAA+B,QAA/B,CAJwB,CAKxB;;AACA,WAAO,YAAM;AAAEF,MAAAA,QAAQ,CAACC,IAAT,CAAcE,KAAd,CAAoBD,QAApB,GAA+BJ,aAA/B;AAA8C,KAA7D;AACH,GAPD,EAOG,EAPH,EATkG,CAgB3F;;AAEP,MAAMH,UAAU,GAAGd,KAAK,CAACuB,WAAN,CAAkB,UAACC,KAAD,EAA0B;AAC3DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,GAAlB;;AACA,YAAQH,KAAK,CAACG,GAAd;AACI,WAAK,QAAL;AACIjB,QAAAA,UAAU,CAAC,IAAD,CAAV;AACAkB,QAAAA,UAAU,CAAC,YAAM;AACbrB,UAAAA,KAAK;AACR,SAFS,EAEP,IAFO,CAAV;AAGA;;AAEJ;AACI;AATR;AAWH,GAbkB,EAahB,EAbgB,CAAnB;AAeA,MAAMsB,OAAO,GAAG,CACZ1B,GAAG,CAAC2B,IADQ,EAEZrB,OAAO,GAAGN,GAAG,CAACM,OAAP,GAAiBN,GAAG,CAAC4B,KAFhB,EAGdC,IAHc,CAGT,GAHS,CAAhB;AAKA,SACI;AAAK,IAAA,SAAS,EAAEH;AAAhB,KACI;AAAK,IAAA,SAAS,EAAE1B,GAAG,CAAC8B,QAApB;AAA8B,IAAA,OAAO,EAAE;AAAA,aAAM1B,KAAK,EAAX;AAAA;AAAvC,IADJ,EAEI;AAAK,IAAA,SAAS,EAAEJ,GAAG,CAAC+B;AAApB,KACI;AAAO,IAAA,SAAS,EAAE/B,GAAG,CAACgC,KAAtB;AAA6B,IAAA,QAAQ;AAArC,KACI;AAAQ,IAAA,GAAG,EAAE7B,SAAb;AAAwB,IAAA,IAAI,EAAC;AAA7B,IADJ,CADJ,CAFJ,EAOI;AAAK,IAAA,SAAS,EAAEH,GAAG,CAACiC,WAApB;AAAiC,IAAA,OAAO,EAAE;AAAA,aAAM7B,KAAK,EAAX;AAAA;AAA1C,KACI,MAAC,eAAD;AAAiB,IAAA,IAAI,EAAEL,KAAK,CAACmC;AAA7B,IADJ,CAPJ,CADJ;AAaH,CAnDD;;AAqDA,eAAehC,aAAf","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { icons } from '../../icons/icons'\n\nconst css = require('./ExpandedVideo.module.css')\n\ninterface IExpandedVideo {\n    video_src: string\n    close: () => void\n}\n\nconst ExpandedVideo: React.FunctionComponent<IExpandedVideo> = ({ video_src, close }): JSX.Element => {\n    const[unmount, setUnmount] = React.useState(false)\n\n    React.useEffect(() => {\n        window.addEventListener('keydown', keyHandler, true)\n\n        return () => window.removeEventListener('keydown', keyHandler, true)\n    }, [])\n\n    React.useLayoutEffect(() => {\n        // Get original body overflow\n        const originalStyle: string = window.getComputedStyle(document.body).overflow!  \n        // Prevent scrolling on mount\n        document.body.style.overflow = 'hidden'\n        // Re-enable scrolling when component unmounts\n        return () => { document.body.style.overflow = originalStyle }\n    }, []) // Empty array ensures effect is only run on mount and unmount\n\n    const keyHandler = React.useCallback((event: KeyboardEvent) => {\n        console.log(event.key)\n        switch (event.key) {\n            case 'Escape':\n                setUnmount(true)\n                setTimeout(() => {\n                    close()\n                }, 5000)\n                break;\n\n            default:\n                break;\n        }\n    }, [])\n\n    const classes = [\n        css.Main,\n        unmount ? css.unmount : css.mount,\n    ].join(' ')\n\n    return (\n        <div className={classes}>\n            <div className={css.Backdrop} onClick={() => close()}></div>\n            <div className={css.VideoContainer}>\n                <video className={css.Video} controls >\n                    <source src={video_src} type=\"video/mp4\"/>\n                </video>\n            </div>\n            <div className={css.CloseButton} onClick={() => close()}>\n                <FontAwesomeIcon icon={icons.faTimes} />\n            </div>\n        </div>\n    )\n}\n\nexport default ExpandedVideo"]},"metadata":{},"sourceType":"module"}