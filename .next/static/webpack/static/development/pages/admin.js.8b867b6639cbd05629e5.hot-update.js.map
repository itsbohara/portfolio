{"version":3,"file":"static/webpack/static\\development\\pages\\admin.js.8b867b6639cbd05629e5.hot-update.js","sources":["webpack:///./containers/Admin/Admin.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\nimport { NextPage } from 'next'\r\n\r\nimport Auth from '../../containers/Auth/Auth'\r\nimport { CubeSpinner } from '../../components/UI/Spinner/Spinner'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { icons } from '../../icons/icons'\r\nimport { IPortfolioItem } from '../../interfaces/interfaces'\r\n\r\nconst css = require('./Admin.module.css')\r\n\r\ntype TAuthState = {\r\n    signedIn: boolean\r\n    email?: string\r\n    password?: string\r\n    idToken?: string\r\n}\r\n\r\ntype TAuthActions = \r\n| ({ type: 'signin', payload: { email: string, password: string, idToken: string } })\r\n| ({ type: 'signout' })\r\n\r\nconst initialAuthState: TAuthState = {\r\n    signedIn: false\r\n}\r\n\r\nconst signIn = (state: TAuthState, action: TAuthActions): TAuthState => {\r\n    if (action.type !== 'signin') return { ...state }\r\n    \r\n    const updatedState: TAuthState = {\r\n        ...state,\r\n        signedIn: true,\r\n        email: action.payload?.email,\r\n        password: action.payload?.password,\r\n        idToken: action.payload?.idToken,\r\n    }\r\n\r\n    return {\r\n        ...updatedState\r\n    }\r\n}\r\n\r\nconst authReducer = (state: TAuthState = initialAuthState, action: TAuthActions): TAuthState => {\r\n    switch (action.type) {\r\n        case 'signin':\r\n            return signIn(state, action)\r\n\r\n        case 'signout':\r\n            return {\r\n                signedIn: false\r\n            }\r\n    \r\n        default:\r\n            return { ...state }\r\n    }\r\n}\r\n\r\n\r\nconst Admin: React.FunctionComponent = (): JSX.Element => {\r\n    const [state, dispatch] = React.useReducer(authReducer, initialAuthState)\r\n    const [sending, setSending] = React.useState<boolean>(true)\r\n    const [screensize, setScreensize] = React.useState<{ width: number, height: number}>()\r\n\r\n    React.useEffect(() => {\r\n        document.title = 'Portfolio // Admin'\r\n\r\n        setScreensize({\r\n            width: window.innerWidth,\r\n            height: window.innerHeight\r\n        })\r\n\r\n        if (localStorage.length !== 0) {\r\n            // check for auth info in local storage\r\n            // compare current time in milliseconds to expire time in storage\r\n            // if current time is LESS, use the auth info from storage to refresh\r\n            // else, clear local storage\r\n            const expireTime = (localStorage.getItem('expireTime'))\r\n            if (expireTime) {\r\n                // if auth token has not expired yet\r\n                if (new Date().getTime() < +expireTime) {\r\n                    const authInfo = {\r\n                        email: localStorage.getItem('email')!,\r\n                        password: localStorage.getItem('password')!,\r\n                        idToken: localStorage.getItem('idToken')!\r\n                    }\r\n                    dispatch({ type: 'signin', payload: authInfo })\r\n                    setSending(false)\r\n                // if auth has expired\r\n                } else {\r\n                    localStorage.clear()\r\n                    setSending(false)\r\n                }\r\n            }\r\n        } else {\r\n            setSending(false)\r\n        }\r\n    }, [])\r\n\r\n    const signInHandler = (email: string, password: string, idToken: string) => {\r\n        const authInfo = {\r\n            email: email,\r\n            password: password,\r\n            idToken: idToken\r\n        }\r\n        dispatch({ type: 'signin', payload: authInfo })\r\n    }\r\n\r\n    return (\r\n        <div className={css.Main} style={{minHeight: `${screensize?.height}px`, minWidth: `${screensize?.width}px`}}>\r\n            { !state.signedIn && <Auth setSending={setSending} signIn={signInHandler} /> }\r\n            { sending && <Loading /> }\r\n            { state. signedIn && <AdminContent /> }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Loading: React.FunctionComponent = (): JSX.Element => (\r\n    <div className={css.Loading}>\r\n        <CubeSpinner />\r\n    </div>\r\n)\r\n\r\nconst AdminContent: React.FunctionComponent = (): JSX.Element => {\r\n    React.useEffect(() => {\r\n        const baseURL: string = 'https://joonajo-portfolio.firebaseio.com/portfolioItems/'\r\n        const idToken: string = localStorage.getItem('idToken')!\r\n        const tokenParam: string = `?access_token=${idToken}`\r\n\r\n        const test = JSON.stringify({\r\n            name: 'test'\r\n        })\r\n\r\n        fetch(baseURL + tokenParam, { method: 'put', body: test }).then(response => response.json()\r\n            .then(data => {\r\n                console.log(data)\r\n            }))\r\n    })\r\n\r\n    return (\r\n        <div className={css.AdminContentWrapper}>\r\n            <PortfolioItems />\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface IPortfolioItems {\r\n    items?: IPortfolioItem[]\r\n}\r\n\r\nconst PortfolioItems: React.FunctionComponent<IPortfolioItems> = ({ items }): JSX.Element => {\r\n    return (\r\n        <div className={css.ItemsContainer}>\r\n            { items && items.map((item: IPortfolioItem) => {\r\n                return (\r\n                    <div>\r\n                        item\r\n                    </div>\r\n                )\r\n            })}\r\n            <AddPortfolioItem />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddPortfolioItem: React.FunctionComponent = (): JSX.Element => {\r\n    const [showForm, setShowForm] = React.useState<boolean>(false)\r\n\r\n    const addItemClickedHandler = () => {\r\n        setShowForm(true)\r\n    }\r\n\r\n    return (\r\n        <div className={css.AddItemContainer}>\r\n            <span className={css.AddItemButton}>add item <FontAwesomeIcon icon={icons.faPlus} className={css.AddItemIcon} /></span>\r\n            {  }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Admin\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAYA;AACA;AADA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AALA;AACA;AAOA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAVA;AAYA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAHA;AAIA;AAEA;AACA;AAAA;AAIA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AAEA;AAKA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}