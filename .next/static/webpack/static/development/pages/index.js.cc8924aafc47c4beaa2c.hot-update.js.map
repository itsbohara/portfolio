{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.cc8924aafc47c4beaa2c.hot-update.js","sources":["webpack:///./containers/Home/Home.tsx"],"sourcesContent":["import React from 'react'\r\n\r\nimport {Â NextPage } from 'next'\r\nimport Cover from '../../components/Cover/Cover'\r\nimport Layout from '../../components/UI/Layout/Layout'\r\nimport Content from '../../components/Content/Content'\r\nimport { CubeSpinner } from '../../components/UI/Spinner/Spinner'\r\nimport { IPortfolioContext, PortfolioContext, TPortfolioState, TPortfolioActionTypes } from '../../context/portfolioContext'\r\nimport { TDispatch } from '../../context/authContext'\r\nimport { IPortfolioItem } from '../../interfaces/interfaces'\r\n\r\nconst css = require('./Home.module.css')\r\n\r\nconst Home: NextPage = (): JSX.Element => {\r\n    const [bgLoaded, setBgLoaded] = React.useState<boolean>(false)\r\n    const [loading, setLoading] = React.useState<boolean>(true)\r\n\r\n    React.useEffect(() => {\r\n        // check if bg image is already cached\r\n        // if yes, set as loaded\r\n        const image = new Image()\r\n        image.src = '/images/palm.png'\r\n        if (image.complete) setBgLoaded(true)\r\n    }, [])\r\n\r\n    const portfolioContext: IPortfolioContext = React.useContext(PortfolioContext)\r\n    const portfolioState: TPortfolioState = portfolioContext.state\r\n    const portfolioDispatch: TDispatch = portfolioContext.dispatch!\r\n\r\n\r\n    React.useEffect(() => {\r\n        if (portfolioState && portfolioDispatch) {\r\n            if (portfolioState.items.length === 0) {\r\n                const baseURL: string = 'https://joonajo-portfolio.firebaseio.com/items.json'\r\n\r\n                const newItems: IPortfolioItem[] = []\r\n                \r\n                fetch(baseURL, { method: 'get' }).then(response => response.json())\r\n                    .then(data => {\r\n                        console.log(data)\r\n                        Object.keys(data).forEach(item => {\r\n                            newItems.push(data[item])\r\n                        })\r\n                        portfolioDispatch({ type: TPortfolioActionTypes.SET_ITEMS, payload: newItems })\r\n                        setLoading(false)\r\n                    })\r\n            } else {\r\n                setLoading(false)\r\n            }\r\n        }\r\n    }, [portfolioState])\r\n\r\n    return (\r\n        <>\r\n            { (!bgLoaded || loading) && <Loading /> }\r\n            <Layout>\r\n                <Cover load={() => setBgLoaded(true)} />\r\n                { bgLoaded && <Content /> }\r\n            </Layout>\r\n        </>\r\n    )\r\n}\r\n\r\nconst Loading: React.FunctionComponent = (): JSX.Element => {\r\n    return (\r\n        <div className={css.Loading}>\r\n            <CubeSpinner />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}