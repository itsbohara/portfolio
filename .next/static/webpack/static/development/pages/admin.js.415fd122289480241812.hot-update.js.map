{"version":3,"file":"static/webpack/static\\development\\pages\\admin.js.415fd122289480241812.hot-update.js","sources":["webpack:///./pages/admin/index.tsx"],"sourcesContent":["import * as React from 'react'\n\nimport { NextPage } from 'next'\n\nimport { CubeSpinner } from '../../components/UI/Spinner/Spinner'\nimport Auth from '../../containers/Auth/Auth'\nimport Admin from '../../containers/Admin/Admin'\n\nconst css = require('./index.module.css')\n\ntype TAuthState = {\n    signedIn: boolean\n    email?: string\n    password?: string\n    idToken?: string\n}\n\ntype TAction = {\n    type: string\n    payload?: any\n}\n\nconst initialAuthState: TAuthState = {\n    signedIn: false\n}\n\nconst signIn = (state: TAuthState, action: TAction): TAuthState => {\n\n    return {\n        ...state\n    }\n}\n\nconst authReducer = (state: TAuthState = initialAuthState, action: TAction): TAuthState => {\n    switch (action.type) {\n        case 'signin':\n            return signIn(state, action)\n    \n        default:\n            return { ...state }\n    }\n}\n\n\nconst AdminPage: NextPage = (): JSX.Element => {\n    const [state, dispatch] = React.useReducer(authReducer, initialAuthState)\n    const [sending, setSending] = React.useState<boolean>(true)\n    const [screensize, setScreensize] = React.useState<{ width: number, height: number}>()\n\n    React.useEffect(() => {\n        document.title = 'Portfolio // Admin'\n\n        setScreensize({\n            width: window.innerWidth,\n            height: window.innerHeight\n        })\n\n        if (localStorage.length !== 0) {\n            // check for auth info in local storage\n            // compare current time in milliseconds to expire time in storage\n            // if current time is LESS, use the auth info from storage to refresh\n            // else, clear local storage\n            const expireTime = (localStorage.getItem('expireTime'))\n            if (expireTime) {\n                if (new Date().getTime() < +expireTime) {\n                    dispatch({ type: 'signin', })\n                    setSending(false)\n                } else {\n                    localStorage.clear()\n                    setSending(false)\n                }\n            }\n        } else {\n            setSending(false)\n        }\n    }, [])\n\n    const signInHandler = (email: string, password: string, idToken: string) => {\n        const authInfo = {\n            email: email,\n            password: password,\n            idToken: idToken\n        }\n        dispatch({ type: 'signin', payload: authInfo })\n    }\n\n    return (\n        <div className={css.Main} style={{minHeight: `${screensize?.height}px`, minWidth: `${screensize?.width}px`}}>\n            { !state.signedIn && <Auth setSending={setSending} signIn={signInHandler} /> }\n            { state.signedIn && <Admin /> }\n            { sending && <Loading /> }\n        </div>\n    )\n}\n\nconst Loading: React.FunctionComponent = (): JSX.Element => (\n    <div className={css.Loading}>\n        <CubeSpinner />\n    </div>\n)\n\n\nexport default AdminPage"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AADA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AAAA;AADA;AACA;AAMA;;;;A","sourceRoot":""}